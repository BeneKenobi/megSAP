<?php

/** 
	@page blast2products
*/

require_once(dirname($_SERVER['SCRIPT_FILENAME'])."/../Common/all.php");

error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);

//parse command line arguments
$parser = new ToolBase("blast2products", "\$Rev: 257 $", "Searchs for pcr-products in a primer pair generated by primerVariant.");
$parser->addInfile("in",  "Input primer1 file.", false);
$parser->addInfile("in2",  "Input primer2 file.", false);
$parser->addOutfile("out",  "Output TXT file.", false);
//optional
$parser->addInt("max_len", "Maximum product length.", true, 4000);
$parser->addFlag("separate", "print primer mapping seperately if success");
extract($parser->parse($argv));

/*
# Fields: query id, subject id, % identity, alignment length, mismatches, gap opens, q. start, q. end, s. start, s. end, evalue, bit score
TNNI3d_1R	chr19	100.00	24	0	0	1	24	55668736	55668759	7e-05	48.1
TNNI3d_1R	chr19	100.00	18	0	0	3	20	2194693	2194710	0.28	36.2
TNNI3d_1R	chr19	100.00	17	0	0	3	19	5251756	5251772	1.1	34.2
TNNI3d_1R	chr19	100.00	16	0	0	1	16	3820802	3820787	4.4	32.2
TNNI3d_1R	chr19	100.00	16	0	0	4	19	17166842	17166857	4.4	32.2
*/


//function to calculate hit length
function length($h1, $h2)
{
	return ($h2[3]-$h1[3]-1)+$h2[1]+$h1[1];//distance between the primers+primerlength;
}

//load blast results
$file = file($in);
$file2 = file($in2);
$blast = array();

//extract blast matches

if (count($file)+count($file2)>10000)
{
	file_put_contents($out, "Unspecific Primers\n");
	file_put_contents($out, count($file)." BLAST results",FILE_APPEND);
	exit();
}

$counter_rev=0;
$counter_fwd=0;

//merge two blast results (because additional PCR-products may also occur using the same primer as fwd AND rev)
//split on chromosomes

foreach($file as $line)
{
	if (starts_with($line, "#")) continue;
	$parts = explode("\t", $line);
	if (count($parts)<11) continue;
	list($length, $chr, $identity, $length, , , , $q_end, $start, $end,) = $parts;
	
	if ($length==$q_end)//check if alignment starts on 3'
	{
		if (array_key_exists($chr,$blast))
		{
				$blast[$chr][] = array($identity, $length, $start, $end, "fwd");
		}
		else 
		{
			$blast[$chr] = array(array($identity, $length, $start, $end, "fwd"));
		}
		++$counter_fwd;
	}
}

foreach($file2 as $line)
{
	if (starts_with($line, "#")) continue;
	$parts = explode("\t", $line);
	if (count($parts)<11) continue;
	list($length, $chr, $identity, $length, , , , $q_end, $start, $end,) = $parts;
	
	if ($length==$q_end)//check if alignment starts on 3'
	{
		if (array_key_exists($chr,$blast))
		{
				$blast[$chr][] = array($identity, $length, $start, $end, "rev");
		}
		else 
		{
			$blast[$chr] = array(array($identity, $length, $start, $end, "rev"));
		}
		++$counter_rev;
	}
}

file_put_contents($out, "");

if ($counter_fwd>3000)
{
	file_put_contents($out, "Unspecific Forward Primer\n",FILE_APPEND);
	file_put_contents($out, $counter_fwd." possible positions\n",FILE_APPEND);
}	

if ($counter_rev>3000)
{
	file_put_contents($out, "Unspecific Reverse Primer\n",FILE_APPEND);
	file_put_contents($out, $counter_rev." possible positions\n",FILE_APPEND);
}
	
if (($counter_rev<=3000)&&($counter_fwd<=3000))
{
	//reduce to possible hits (correct chr, length<max_len)
	$possible_hits = array();
	foreach (array_keys($blast) as $chr)
	{
		foreach ($blast[$chr] as $blast1)
		{	
			foreach ($blast[$chr] as $blast2)
			{	
				if ($blast1!=$blast2)//don't compare a result with itself
				{
					$dist = length($blast1, $blast2);
					//print $dist;
					if ($dist<$max_len)
					{
						//if blast2's starts is > blast1' start, blast1's end> blast1's start and blast2's start>blast2's end
						//==primers are facing each other with blast1 left from blast2
						//the opposite case (blast2 left from blast1) need not to be covered because $blast1 and $blast2 both runs completely through
						//$blast, which includes all results from primer1 and primer2
						if (($blast2[2]>$blast1[2])&&($blast1[3]>$blast1[2])&&($blast2[2]>$blast2[3]))
						{
							$possible_hits[] = array($chr,$blast1, $blast2);
						}
					}
				}
			}
		}
	}
	if (count($possible_hits)==0)
	{
		$output[] = "NO likely PCR-product by blast2product. Possible bug, please report!";
	}
	else if (count($possible_hits)>=2)
	{
		$output[] ="Multiple possible PCR-results"; 
		$counter=1;
		print count($possible_hits)."\n";
		foreach ($possible_hits as $possible_hit)
		{
			$h1 = $possible_hit[1];
			//var_dump($h1);//{{100,21,112102142,112102162},{100,19,112102342,112102324}}
			$h2 = $possible_hit[2];
			$length = length($h1, $h2);
			if($separate)
			{
				$output[] = $counter.") ".$possible_hit[0].":".$possible_hit[1][2]."-".$possible_hit[2][2]." ".$length." ".$possible_hit[1][4].": ".$possible_hit[1][2]." ".$possible_hit[1][3]." ".$possible_hit[2][4].$possible_hit[2][3]." ".$possible_hit[2][2];
			}
			else
			{
				$output[] =$counter.") ".$possible_hit[0].":".$possible_hit[1][2]."-".$possible_hit[2][2]." ".$length;
			}
			++$counter;
			print $counter;
			//var_dump($possible_hit);
		}
		
	}
	else
	{
		$h1 = $possible_hits[0][1];
		$h2 = $possible_hits[0][2];
		$length = length($h1, $h2);
		if($separate)
		{
			$output[] = $counter.") ".$$possible_hits[0][0].":".$$possible_hits[0][1][2]."-".$$possible_hits[0][2][2]." ".$length." ".$$possible_hits[0][1][4].": ".$$possible_hits[0][1][2]." ".$$possible_hits[0][1][3]." ".$$possible_hits[0][2][4].$$possible_hits[0][2][3]." ".$$possible_hits[0][2][2];
		}
		else
		{
			$output[] =$counter.") ".$possible_hits[0][0].":".$possible_hits[0][1][2]."-".$possible_hits[0][2][2]." ".$length;
		}
	}
	if (count($output)>0)
	{
		file_put_contents($out, implode("\n", $output)."\n");
	}
	else
	{
		file_put_contents($out, "");
	}
}